struct Vector2
    {
        public double x { get; set; }
        public double y { get; set; }
        public Vector2(double x, double y)
        {
            this.x = x;
            this.y = y;
        }
        public double Length()
        {
            return Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2));
        }
        public override string ToString()
        {
            return (x + ", " + y);
        }
        public static Vector2 operator +(Vector2 v1, Vector2 v2)
        {
            return new Vector2(v1.x + v2.x, v1.y + v2.y);
        }
        public static Vector2 operator -(Vector2 v1, Vector2 v2)
        {
            return new Vector2(v1.x - v2.x, v1.y - v2.y);
        }
        public static Vector2 operator *(double s, Vector2 v)
        {
            return new Vector2(v.x * s, v.y * s);
        }
        public static Vector2 operator *(Vector2 v, double s)
        {
            return new Vector2(v.x * s, v.y * s);
        }
        public static double operator *(Vector2 v1, Vector2 v2)
        {
            return ((v1.x * v2.x) + (v1.y * v2.y));
        }
    }
    struct Vector3
    {
        public double x { get; set; }
        public double y { get; set; }
        public double z { get; set; }
        public Vector3(double x, double y, double z)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }
        public double Length()
        {
            return Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2) + Math.Pow(z, 2));
        }
        public override string ToString()
        {
            return (x + ", " + y + ", " + z);
        }
        public static Vector3 operator +(Vector3 v1, Vector3 v2)
        {
            return new Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
        }
        public static Vector3 operator -(Vector3 v1, Vector3 v2)
        {
            return new Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);
        }
        public static Vector3 operator *(double s, Vector3 v)
        {
            return new Vector3(v.x * s, v.y * s, v.z * s);
        }
        public static Vector3 operator *(Vector3 v, double s)
        {
            return new Vector3(v.x * s, v.y * s, v.z * s);
        }
        public static double operator *(Vector3 v1, Vector3 v2)
        {
            return ((v1.x * v2.x) + (v1.y * v2.y) + (v1.z * v2.z));
        }
        public static Vector3 operator &(Vector3 v1, Vector3 v2)
        {
            double x = (v1.y * v2.z) - (v1.z * v2.y);
            double y = (v1.z * v2.x) - (v1.x * v2.z);
            double z = (v1.x * v2.y) - (v1.y * v2.x);
            return new Vector3(x, y, z);
        }
    }
